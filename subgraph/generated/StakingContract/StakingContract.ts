// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newTotalStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currentRewardRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newTotalStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currentRewardRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get rewardsAccrued(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newPendingRewards(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class EmergencyWithdrawn extends ethereum.Event {
  get params(): EmergencyWithdrawn__Params {
    return new EmergencyWithdrawn__Params(this);
  }
}

export class EmergencyWithdrawn__Params {
  _event: EmergencyWithdrawn;

  constructor(event: EmergencyWithdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get penalty(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newTotalStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RewardRateUpdated extends ethereum.Event {
  get params(): RewardRateUpdated__Params {
    return new RewardRateUpdated__Params(this);
  }
}

export class RewardRateUpdated__Params {
  _event: RewardRateUpdated;

  constructor(event: RewardRateUpdated) {
    this._event = event;
  }

  get oldRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StakingInitialized extends ethereum.Event {
  get params(): StakingInitialized__Params {
    return new StakingInitialized__Params(this);
  }
}

export class StakingInitialized__Params {
  _event: StakingInitialized;

  constructor(event: StakingInitialized) {
    this._event = event;
  }

  get stakingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get initialRewardRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakingContract__getUserDetailsResultValue0Struct extends ethereum.Tuple {
  get stakedAmount(): BigInt {
    return this[0].toBigInt();
  }

  get lastStakeTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get pendingRewards(): BigInt {
    return this[2].toBigInt();
  }

  get timeUntilUnlock(): BigInt {
    return this[3].toBigInt();
  }

  get canWithdraw(): boolean {
    return this[4].toBoolean();
  }
}

export class StakingContract extends ethereum.SmartContract {
  static bind(address: Address): StakingContract {
    return new StakingContract("StakingContract", address);
  }

  getUserDetails(
    _user: Address,
  ): StakingContract__getUserDetailsResultValue0Struct {
    let result = super.call(
      "getUserDetails",
      "getUserDetails(address):((uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(_user)],
    );

    return changetype<StakingContract__getUserDetailsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getUserDetails(
    _user: Address,
  ): ethereum.CallResult<StakingContract__getUserDetailsResultValue0Struct> {
    let result = super.tryCall(
      "getUserDetails",
      "getUserDetails(address):((uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<StakingContract__getUserDetailsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRewardRate(): BigInt {
    let result = super.call(
      "currentRewardRate",
      "currentRewardRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_currentRewardRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRewardRate",
      "currentRewardRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}
